{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API for Meebin application",
        "title": "Meebin",
        "contact": {
            "name": "Krab1o",
            "url": "https://t.me/krab1o"
        },
        "version": "0.1"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Creates new pair of refresh-access tokens based on your credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login info",
                        "name": "UserCreds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Creds"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseTokens"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "jwtToken": []
                    }
                ],
                "description": "Disables refresh token so you won't able to use it in /auth/refresh method",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Returns new access token based on your refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh",
                "parameters": [
                    {
                        "description": "User's Refresh Token",
                        "name": "RefreshToken",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AccessToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user in service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Registration",
                "parameters": [
                    {
                        "description": "New User Info",
                        "name": "UserData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NewUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseTokens"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "jwtToken": []
                    }
                ],
                "description": "Returns an array of users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Listing users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.BaseUser"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "security": [
                    {
                        "jwtToken": []
                    }
                ],
                "description": "Returns user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BaseUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "jwtToken": []
                    }
                ],
                "description": "Deletes user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Deletes user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "jwtToken": []
                    }
                ],
                "description": "Updates user's fields specified in the body.\nRedundant fields ignored.\nIf the field not specified, it is not updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Updated user ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user fields",
                        "name": "UpdatedEntity",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatedUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatedUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Error": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "dto.AccessToken": {
            "type": "object",
            "required": [
                "accessToken"
            ],
            "properties": {
                "accessToken": {
                    "description": "Should be a JWT access-token",
                    "type": "string"
                }
            }
        },
        "dto.BaseUser": {
            "description": "BaseUser-part of a list-of-users requests",
            "type": "object",
            "properties": {
                "creds": {
                    "$ref": "#/definitions/dto.Creds"
                },
                "id": {
                    "type": "integer",
                    "example": 42
                },
                "personalData": {
                    "$ref": "#/definitions/dto.PersonalData"
                },
                "roles": {
                    "description": "Roles' array",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stats": {
                    "$ref": "#/definitions/dto.Stats"
                }
            }
        },
        "dto.Creds": {
            "description": "BaseUser credentials",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user123@example.com"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "example": "Password123"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3,
                    "example": "user123"
                }
            }
        },
        "dto.NewCreds": {
            "description": "New user's credentials",
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user123@example.com"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "example": "Password123"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3,
                    "example": "user123"
                }
            }
        },
        "dto.NewPersonalData": {
            "description": "New user's personal data",
            "type": "object",
            "required": [
                "birthDate",
                "city",
                "givenName",
                "patronymic",
                "surname"
            ],
            "properties": {
                "birthDate": {
                    "description": "This field accepts default time format from RFC (DD-MM-YYYY, just pick default time library)",
                    "type": "string",
                    "format": "date-time"
                },
                "city": {
                    "type": "string",
                    "example": "Vladivostok"
                },
                "givenName": {
                    "type": "string",
                    "example": "Ivan"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Ivanovich"
                },
                "surname": {
                    "type": "string",
                    "example": "Ivanov"
                }
            }
        },
        "dto.NewUser": {
            "description": "New registrating user structure",
            "type": "object",
            "required": [
                "creds",
                "personalData"
            ],
            "properties": {
                "creds": {
                    "$ref": "#/definitions/dto.NewCreds"
                },
                "personalData": {
                    "$ref": "#/definitions/dto.NewPersonalData"
                }
            }
        },
        "dto.PersonalData": {
            "description": "BaseUser personal data",
            "type": "object",
            "properties": {
                "birthDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "city": {
                    "type": "string",
                    "example": "Vladivostok"
                },
                "givenName": {
                    "type": "string",
                    "example": "Ivan"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Ivanovich"
                },
                "surname": {
                    "type": "string",
                    "example": "Ivanov"
                }
            }
        },
        "dto.RefreshToken": {
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "description": "Should be a JWT refresh-token",
                    "type": "string"
                }
            }
        },
        "dto.ResponseTokens": {
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ],
            "properties": {
                "accessToken": {
                    "description": "Should be a JWT access-token",
                    "type": "string"
                },
                "refreshToken": {
                    "description": "Should be a JWT refresh-token",
                    "type": "string"
                }
            }
        },
        "dto.Stats": {
            "description": "BaseUser statistics",
            "type": "object",
            "properties": {
                "rating": {
                    "type": "number"
                },
                "reportCount": {
                    "type": "integer"
                },
                "utilizeCount": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdatedCreds": {
            "description": "Credentials which will be updated",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user123@example.com"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "example": "Password123"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3,
                    "example": "user123"
                }
            }
        },
        "dto.UpdatedPersonalData": {
            "description": "Personal data which will be updated",
            "type": "object",
            "properties": {
                "birthDate": {
                    "description": "This field accepts default time format from RFC (DD-MM-YYYY, just pick default time library)",
                    "type": "string",
                    "format": "date"
                },
                "city": {
                    "type": "string",
                    "example": "Vladivostok"
                },
                "givenName": {
                    "type": "string",
                    "example": "Ivan"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Ivanovich"
                },
                "surname": {
                    "type": "string",
                    "example": "Ivanov"
                }
            }
        },
        "dto.UpdatedUser": {
            "description": "Entity which will be updated",
            "type": "object",
            "properties": {
                "creds": {
                    "$ref": "#/definitions/dto.UpdatedCreds"
                },
                "id": {
                    "type": "integer",
                    "example": 42
                },
                "personalData": {
                    "$ref": "#/definitions/dto.UpdatedPersonalData"
                }
            }
        }
    },
    "securityDefinitions": {
        "jwtToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Everything linked with authorization and JWT-token control",
            "name": "Auth"
        },
        {
            "description": "User control API",
            "name": "User"
        },
        {
            "description": "Event control API",
            "name": "Event"
        }
    ]
}