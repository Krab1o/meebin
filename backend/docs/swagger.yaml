basePath: /api
consumes:
- application/json
definitions:
  api.Error:
    properties:
      message: {}
    type: object
  dto.AccessToken:
    properties:
      accessToken:
        description: Should be a JWT access-token
        type: string
    required:
    - accessToken
    type: object
  dto.BaseCreds:
    description: BaseUser credentials
    properties:
      email:
        example: user123@example.com
        format: email
        type: string
      password:
        example: Password123
        format: password
        minLength: 8
        type: string
      username:
        example: user123
        maxLength: 20
        minLength: 3
        type: string
    type: object
  dto.BaseEvent:
    properties:
      data:
        $ref: '#/definitions/dto.BaseEventData'
      id:
        example: 42
        type: integer
      status:
        $ref: '#/definitions/model.EventStatus'
    required:
    - data
    - id
    - status
    type: object
  dto.BaseEventData:
    properties:
      caller_id:
        example: 42
        type: integer
      description:
        example: Бла-бла-бла
        type: string
      latitude:
        example: 42.881
        type: number
      longtitude:
        example: 45.254
        type: number
      time_called:
        format: date-time
        type: string
      time_utilized:
        format: date-time
        type: string
      title:
        example: Ужасное загрязнение
        type: string
      utilizator_id:
        example: 42
        type: integer
    required:
    - caller_id
    - description
    - latitude
    - longtitude
    - time_called
    - title
    type: object
  dto.BasePersonalData:
    description: BaseUser personal data
    properties:
      birthDate:
        format: date-time
        type: string
      city:
        example: Vladivostok
        type: string
      givenName:
        example: Ivan
        type: string
      patronymic:
        example: Ivanovich
        type: string
      surname:
        example: Ivanov
        type: string
    type: object
  dto.BaseStats:
    description: BaseUser statistics
    properties:
      rating:
        type: number
      reportCount:
        type: integer
      utilizeCount:
        type: integer
    type: object
  dto.BaseUser:
    description: BaseUser-part of a list-of-users requests
    properties:
      creds:
        $ref: '#/definitions/dto.BaseCreds'
      id:
        example: 42
        type: integer
      personalData:
        $ref: '#/definitions/dto.BasePersonalData'
      roles:
        description: Roles' array
        items:
          type: string
        type: array
      stats:
        $ref: '#/definitions/dto.BaseStats'
    type: object
  dto.IdResponse:
    properties:
      id:
        example: 42
        type: integer
    type: object
  dto.LoginCreds:
    properties:
      email:
        example: user123@example.com
        format: email
        type: string
      password:
        example: Password123
        format: password
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.NewEvent:
    properties:
      data:
        $ref: '#/definitions/dto.NewEventData'
      id:
        example: 42
        type: integer
    required:
    - data
    - id
    type: object
  dto.NewEventData:
    properties:
      description:
        example: Бла-бла-бла
        type: string
      latitude:
        example: 42.881
        type: number
      longtitude:
        example: 45.254
        type: number
      title:
        example: Ужасное загрязнение
        type: string
    required:
    - description
    - latitude
    - longtitude
    - title
    type: object
  dto.RefreshToken:
    properties:
      refreshToken:
        description: Should be a JWT refresh-token
        type: string
    required:
    - refreshToken
    type: object
  dto.RegisterCreds:
    description: New user's credentials
    properties:
      email:
        example: user123@example.com
        format: email
        type: string
      password:
        example: Password123
        format: password
        minLength: 8
        type: string
      username:
        example: user123
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.RegisterPersonalData:
    description: New user's personal data
    properties:
      birthDate:
        description: This field accepts default time format from RFC (DD-MM-YYYY,
          just pick default time library)
        format: date-time
        type: string
      city:
        example: Vladivostok
        type: string
      givenName:
        example: Ivan
        type: string
      patronymic:
        example: Ivanovich
        type: string
      surname:
        example: Ivanov
        type: string
    required:
    - birthDate
    - city
    - givenName
    - patronymic
    - surname
    type: object
  dto.RegisterUser:
    description: New registrating user structure
    properties:
      creds:
        $ref: '#/definitions/dto.RegisterCreds'
      personalData:
        $ref: '#/definitions/dto.RegisterPersonalData'
    required:
    - creds
    - personalData
    type: object
  dto.ResponseTokens:
    properties:
      accessToken:
        description: Should be a JWT access-token
        type: string
      refreshToken:
        description: Should be a JWT refresh-token
        type: string
    required:
    - accessToken
    - refreshToken
    type: object
  dto.UpdateCreds:
    description: Credentials which will be updated
    properties:
      email:
        example: user123@example.com
        format: email
        type: string
      password:
        example: Password123
        format: password
        minLength: 8
        type: string
      username:
        example: user123
        maxLength: 20
        minLength: 3
        type: string
    type: object
  dto.UpdateEvent:
    properties:
      data:
        $ref: '#/definitions/dto.UpdateEventData'
      id:
        example: 42
        type: integer
      status:
        $ref: '#/definitions/model.EventStatus'
    type: object
  dto.UpdateEventData:
    properties:
      caller_id:
        example: 42
        type: integer
      description:
        example: Бла-бла-бла
        type: string
      latitude:
        example: 42.881
        type: number
      longtitude:
        example: 45.254
        type: number
      time_called:
        format: date-time
        type: string
      time_utilized:
        format: date-time
        type: string
      title:
        example: Ужасное загрязнение
        type: string
      utilizator_id:
        example: 42
        type: integer
    type: object
  dto.UpdatePersonalData:
    description: Personal data which will be updated
    properties:
      birthDate:
        description: This field accepts default time format from RFC (DD-MM-YYYY,
          just pick default time library)
        format: date
        type: string
      city:
        example: Vladivostok
        type: string
      givenName:
        example: Ivan
        type: string
      patronymic:
        example: Ivanovich
        type: string
      surname:
        example: Ivanov
        type: string
    type: object
  dto.UpdateUser:
    description: Entity which will be updated
    properties:
      creds:
        $ref: '#/definitions/dto.UpdateCreds'
      id:
        example: 42
        type: integer
      personalData:
        $ref: '#/definitions/dto.UpdatePersonalData'
    type: object
  model.EventStatus:
    enum:
    - 1
    type: integer
    x-enum-varnames:
    - StatusOnModeration
host: localhost:8080
info:
  contact:
    name: Krab1o
    url: https://t.me/krab1o
  description: API for Meebin application
  title: Meebin
  version: "0.1"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Creates new pair of refresh-access tokens based on your credentials
      parameters:
      - description: Login info
        in: body
        name: LoginCreds
        required: true
        schema:
          $ref: '#/definitions/dto.LoginCreds'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseTokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Disables refresh token so you won't able to use it in /auth/refresh
        method
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Logout
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Returns new access token based on your refresh token
      parameters:
      - description: User's Refresh Token
        in: body
        name: RefreshToken
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccessToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Refresh
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user in service
      parameters:
      - description: New User Info
        in: body
        name: UserData
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ResponseTokens'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Registration
      tags:
      - Auth
  /events:
    get:
      consumes:
      - application/json
      description: Returns an array of events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.BaseEvent'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Listing events
      tags:
      - Event
    post:
      consumes:
      - application/json
      description: Creates a new event in the system
      parameters:
      - description: New Event Info
        in: body
        name: EventData
        required: true
        schema:
          $ref: '#/definitions/dto.NewEvent'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.IdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Creates event
      tags:
      - Event
  /events/{event_id}:
    delete:
      consumes:
      - application/json
      description: Delete an event from the system
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Deletes event
      tags:
      - Event
    get:
      consumes:
      - application/json
      description: Returns event by ID
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseEvent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Get event by ID
      tags:
      - Event
    patch:
      consumes:
      - application/json
      description: |-
        Updates event's fields specified in the body.
        Redundant fields ignored.
        If the field not specified, it is not updated
      parameters:
      - description: Updated event ID
        in: path
        name: event_id
        required: true
        type: integer
      - description: Updated event fields
        in: body
        name: UpdatedEntity
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseEvent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Updates event
      tags:
      - Event
  /users:
    get:
      consumes:
      - application/json
      description: Returns an array of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.BaseUser'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Listing users
      tags:
      - User
  /users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Deletes user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Deletes user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Returns user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Get user by ID
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: |-
        Updates user's fields specified in the body.
        Redundant fields ignored.
        If the field not specified, it is not updated
      parameters:
      - description: Updated user ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Updated user fields
        in: body
        name: UpdatedEntity
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BaseUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - jwtToken: []
      summary: Updates user
      tags:
      - User
produces:
- application/json
schemes:
- http
securityDefinitions:
  jwtToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Everything linked with authorization and JWT-token control
  name: Auth
- description: User control API
  name: User
- description: Event control API
  name: Event
